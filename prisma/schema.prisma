generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  nama                String
  username            String                @unique
  email               String                @unique
  profile_pic         String                @default("https://storage.googleapis.com/nimbus-capstone/profile_pics/user.png")
  password            String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  is_user             Boolean               @default(true)
  perencanaanManual   PerencanaanManual[]
  perencanaanOtomatis PerencanaanOtomatis[]
  token               Token[]

  @@map("users")
}

model Token {
  id        Int     @id @default(autoincrement())
  email     String
  token     String
  expiresAt BigInt
  used      Boolean @default(false)
  user_id   Int
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_token")
}

model TempatWisata {
  id                              Int                               @id @default(autoincrement())
  nama                            String
  deskripsi                       String?
  provinsi_id                     Int
  categoryWisata_id               Int
  thumbnail                       String
  alamat                          String
  average_rating                  String
  google_link                     String
  latitude                        String
  longitude                       String
  review_total                    String
  website                         String
  created_at                      DateTime                          @default(now())
  TempatWisataPerencanaanManual   TempatWisataPerencanaanManual[]
  TempatWisataPerencanaanOtomatis TempatWisataPerencanaanOtomatis[]
  categoryWisata                  CategoryWisata                    @relation(fields: [categoryWisata_id], references: [id], onDelete: Cascade)
  provinsi                        Provinsi                          @relation(fields: [provinsi_id], references: [id], onDelete: Cascade)

  @@map("tempat_wisata")
}

model Provinsi {
  id                Int                   @id @default(autoincrement())
  nama              String
  thumbnail         String
  perencanaanManual PerencanaanManual[]
  perencanaan       PerencanaanOtomatis[]
  tempatWisata      TempatWisata[]

  @@map("provinsi")
}

model CategoryWisata {
  id                  Int                   @id @default(autoincrement())
  nama                String
  thumbnail           String
  perencanaanManual   PerencanaanManual[]
  PerencanaanOtomatis PerencanaanOtomatis[]
  tempatWisata        TempatWisata[]

  @@map("category_wisata")
}

model PerencanaanManual {
  id                    Int                             @id @default(autoincrement())
  nama                  String
  budget                String?
  user_id               Int
  categoryWisata_id     Int?                            
  provinsi_id           Int?                            
  created_at            DateTime                        @default(now())
  categoryWisata        CategoryWisata?                 @relation(fields: [categoryWisata_id], references: [id], onDelete: Cascade) // Make relation optional
  provinsi              Provinsi?                       @relation(fields: [provinsi_id], references: [id], onDelete: Cascade) // Make relation optional
  user                  User                            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tw_perencanaan_manual TempatWisataPerencanaanManual[]

  @@map("perencanaan_manual")
}

model TempatWisataPerencanaanManual {
  id                   Int               @id @default(autoincrement())
  tanggal_perencanaan  DateTime
  tempatWisata_id      Int
  perencanaanManual_id Int
  perencanaanManual    PerencanaanManual @relation(fields: [perencanaanManual_id], references: [id], onDelete: Cascade)
  tempatWisata         TempatWisata      @relation(fields: [tempatWisata_id], references: [id], onDelete: Cascade)

  @@map("tempatWisata_perencanaan_manual")
}

model PerencanaanOtomatis {
  id                      Int                               @id @default(autoincrement())
  nama                    String
  budget                  String
  user_id                 Int
  provinsi_id             Int
  categoryWisata_id       Int
  created_at              DateTime                          @default(now())
  categoryWisata          CategoryWisata                    @relation(fields: [categoryWisata_id], references: [id], onDelete: Cascade)
  provinsi                Provinsi                          @relation(fields: [provinsi_id], references: [id], onDelete: Cascade)
  User                    User                              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tw_perencanaan_otomatis TempatWisataPerencanaanOtomatis[]

  @@map("perencanaan_otomatis")
}

model TempatWisataPerencanaanOtomatis {
  id                     Int                 @id @default(autoincrement())
  tanggal_perencanaan    DateTime
  perencanaanOtomatis_id Int
  tempatWisata_id        Int
  perencanaanOtomatis    PerencanaanOtomatis @relation(fields: [perencanaanOtomatis_id], references: [id], onDelete: Cascade)
  tempatWisata           TempatWisata        @relation(fields: [tempatWisata_id], references: [id], onDelete: Cascade)

  @@map("tempatWisata_perencanaan_otomatis")
}

model Test {
  id        Int    @id @default(autoincrement())
  nama      String
  deskripsi String
}
